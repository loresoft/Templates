<%@ Template Language="C#" TargetLanguage="C#" %>
<%@ Property Name="Namespace" Type="System.String" %>
<%@ Property Name="EntityName" Type="System.String" %>
<%@ Property Name="TestProperty" Type="System.String" Default="Name" %>
<%@ Property Name="KeyType" Type="System.String" Default="int" %>

using AutoMapper;

using Bogus;

using MediatR;
using MediatR.CommandQuery.Commands;
using MediatR.CommandQuery.Queries;

using Microsoft.Extensions.DependencyInjection;

namespace <%= EntityName %>;

[Collection(DependencyInjectionCollection.CollectionName)]
public class <%= EntityName %>Test : DependencyInjectionBase
{
    public <%= EntityName %>Test(ITestOutputHelper outputHelper, DependencyInjectionFixture dependencyInjection)
        : base(outputHelper, dependencyInjection)
    {
    }

    [Fact]
    public async Task FullTest()
    {
        var mediator = ServiceProvider.GetRequiredService<IMediator>();
        mediator.Should().NotBeNull();

        var mapper = ServiceProvider.GetRequiredService<IMapper>();
        mapper.Should().NotBeNull();
        
        var generator = ServiceProvider.GetRequiredService<Faker<<%= EntityName %>CreateModel>>();
        generator.Should().NotBeNull();

        var testValue = $"TEST-{DateTime.UtcNow.Ticks}";
        
        // Create Entity
        var createModel = generator.Generate();
        createModel.<%= TestProperty %> = testValue;

        var createCommand = new EntityCreateCommand<<%= EntityName %>CreateModel, <%= EntityName %>ReadModel>(MockPrincipal.Default, createModel);
        var createResult = await mediator.Send(createCommand);
        createResult.Should().NotBeNull();

        // Get Entity by Key
        var identifierQuery = new EntityIdentifierQuery<<%= KeyType %>, <%= EntityName %>ReadModel>(MockPrincipal.Default, createResult.Id);
        var identifierResult = await mediator.Send(identifierQuery);
        identifierResult.Should().NotBeNull();
        identifierResult.<%= TestProperty %>.Should().Be(createModel.<%= TestProperty %>);

        // Query Entity
        var entityQuery = new EntityQuery
        {
            Sort = [new EntitySort { Name = "Updated", Direction = "Descending" }],
            Filter = new EntityFilter { Name = nameof(<%= EntityName %>ReadModel.<%= TestProperty %>), Value = testValue }
        };
        var listQuery = new EntitySelectQuery<<%= EntityName %>ReadModel>(MockPrincipal.Default, entityQuery);

        var listResult = await mediator.Send(listQuery);
        listResult.Should().NotBeNull();

        // Update Entity
        var updateModel = mapper.Map<<%= EntityName %>UpdateModel>(identifierResult);
        updateModel.<%= TestProperty %> = "Update Command";

        var updateCommand = new EntityUpdateCommand<<%= KeyType %>, <%= EntityName %>UpdateModel, <%= EntityName %>ReadModel>(MockPrincipal.Default, createResult.Id, updateModel);
        var updateResult = await mediator.Send(updateCommand);
        updateResult.Should().NotBeNull();
        updateResult.<%= TestProperty %>.Should().Be("Update Command");

        // Delete Entity
        var deleteCommand = new EntityDeleteCommand<<%= KeyType %>, <%= EntityName %>ReadModel>(MockPrincipal.Default, createResult.Id);
        var deleteResult = await mediator.Send(deleteCommand);
        deleteResult.Should().NotBeNull();
        deleteResult.Id.Should().Be(createResult.Id);
    }
}

