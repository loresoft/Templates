<%@ Template Language="C#" TargetLanguage="C#" %>
<%@ Property Name="Namespace" Type="System.String" %>
<%@ Property Name="EntityName" Type="System.String" %>
<%@ Property Name="TestProperty" Type="System.String" Default="Name" %>

using System;
using System.Threading.Tasks;
using AutoMapper;
using BristolPlace.CaseManagement.Core.Domain.Models;
using DataGenerator;
using FluentAssertions;
using MediatR;
using MediatR.CommandQuery.Commands;
using MediatR.CommandQuery.Queries;
using Microsoft.AspNetCore.JsonPatch;
using Microsoft.AspNetCore.JsonPatch.Operations;
using Microsoft.Extensions.DependencyInjection;
using Xunit;
using Xunit.Abstractions;

namespace BristolPlace.CaseManagement.Core.Tests.Domain
{
    [Collection("DependencyInjectionCollection")]
    public class <%= EntityName %>Test : DependencyInjectionBase
    {
        public <%= EntityName %>Test(ITestOutputHelper outputHelper, DependencyInjectionFixture dependencyInjection)
            : base(outputHelper, dependencyInjection)
        {
        }

        [Fact]
        public async Task FullTest()
        {
            var mediator = ServiceProvider.GetService<IMediator>();
            mediator.Should().NotBeNull();

            var mapper = ServiceProvider.GetService<IMapper>();
            mapper.Should().NotBeNull();
            
            var generator = ServiceProvider.GetService<Generator>();
            generator.Should().NotBeNull();

            var testValue = $"TEST-{DateTime.UtcNow.Ticks}";
            
            // Create Entity
            var createModel = generator.Single<<%= EntityName %>CreateModel>();
            createModel.<%= TestProperty %> = testValue;

            var createCommand = new EntityCreateCommand<<%= EntityName %>CreateModel, <%= EntityName %>ReadModel>(MockPrincipal.Default, createModel);
            var createResult = await mediator.Send(createCommand).ConfigureAwait(false);
            createResult.Should().NotBeNull();

            // Get Entity by Key
            var identifierQuery = new EntityIdentifierQuery<Guid, <%= EntityName %>ReadModel>(MockPrincipal.Default, createResult.Id);
            var identifierResult = await mediator.Send(identifierQuery).ConfigureAwait(false);
            identifierResult.Should().NotBeNull();
            identifierResult.<%= TestProperty %>.Should().Be(createModel.<%= TestProperty %>);

            // Query Entity
            var entityQuery = new EntityQuery
            {
                Sort = new[] { new EntitySort { Name = "Updated", Direction = "Descending" } },
                Filter = new EntityFilter { Name = nameof(<%= EntityName %>ReadModel.<%= TestProperty %>), Value = testValue }
            };
            var listQuery = new EntitySelectQuery<<%= EntityName %>ReadModel>(MockPrincipal.Default, entityQuery);

            var listResult = await mediator.Send(listQuery).ConfigureAwait(false);
            listResult.Should().NotBeNull();

            // Patch Entity
            var patchModel = new JsonPatchDocument();
            patchModel.Operations.Add(new Operation
            {
                op = "replace",
                path = "/<%= TestProperty %>",
                value = "Patch Update"
            });

            var patchCommand = new EntityPatchCommand<Guid, <%= EntityName %>ReadModel>(MockPrincipal.Default, createResult.Id, patchModel);
            var patchResult = await mediator.Send(patchCommand).ConfigureAwait(false);
            patchResult.Should().NotBeNull();
            patchResult.<%= TestProperty %>.Should().Be("Patch Update");

            // Update Entity
            var updateModel = mapper.Map<<%= EntityName %>UpdateModel>(patchResult);
            updateModel.<%= TestProperty %> = "Update Command";

            var updateCommand = new EntityUpdateCommand<Guid, <%= EntityName %>UpdateModel, <%= EntityName %>ReadModel>(MockPrincipal.Default, createResult.Id, updateModel);
            var updateResult = await mediator.Send(updateCommand).ConfigureAwait(false);
            updateResult.Should().NotBeNull();
            updateResult.<%= TestProperty %>.Should().Be("Update Command");

            // Delete Entity
            var deleteCommand = new EntityDeleteCommand<Guid, <%= EntityName %>ReadModel>(MockPrincipal.Default, createResult.Id);
            var deleteResult = await mediator.Send(deleteCommand).ConfigureAwait(false);
            deleteResult.Should().NotBeNull();
            deleteResult.Id.Should().Be(createResult.Id);
        }
    }
}
