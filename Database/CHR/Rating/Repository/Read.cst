<%@ Template Language="C#" TargetLanguage="C#" %>

<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="SourceCommand" Type="SchemaExplorer.CommandSchema" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" %>

<%
var schema = StringUtil.ToPascalCase(SourceCommand.Owner);
var name = StringUtil.ToPascalCase(SourceCommand.Name);
var paramName = StringUtil.ToCamelCase(name);
var className = StringUtil.ToPascalCase(SourceTable.Name);
%>

        #region <%= name %>
        public List<<%= className %>> Read<%= className %>(List<int> idList)
        {
            List<<%= className %>> list;
            DataTable idTable;

            idTable = DataTableHelper.CreateIDTable(idList);
            list = Read<%= className %>(idTable);

            return list;

        }

        internal const string <%= schema %>_Read<%= className %>_SPROC = "<%= SourceCommand.FullName %>";

        internal SqlParameter[] PrepareRead<%= className %>Params()
        {
            SqlParameter[] arrParams;

            arrParams = _sqlRepository.GetCachedParameterSet(CacheKey, <%= schema %>_Read<%= className %>_SPROC);

            if (arrParams == null)
            {
                arrParams = new SqlParameter[5];

                arrParams[0] = new SqlParameter("@IDTable", SqlDbType.Structured);
                arrParams[1] = new SqlParameter("@NTUser", SqlDbType.VarChar, 12);
                arrParams[2] = new SqlParameter("@System", SqlDbType.VarChar, 200);
                arrParams[3] = new SqlParameter("@SessionKey", SqlDbType.VarChar, 50);
                arrParams[4] = new SqlParameter("@Token", SqlDbType.VarChar, 50);

                _sqlRepository.CacheParameterSet(CacheKey, <%= schema %>_Read<%= className %>_SPROC, arrParams);
            }

            return arrParams;
        }

        private List<<%= className %>> Read<%= className %>(DataTable idTable)
        {
            SqlParameter[] arrParams;
            IDataReader dr = null;
            List<<%= className %>> list = null;
            <%= className %> dto;
            DateTime start;

            try
            {
                list = new List<<%= className %>>();

                arrParams = PrepareRead<%= className %>Params();

                arrParams[0].Value = idTable;
                arrParams[1].Value = _sessionManager.UserName;
                arrParams[2].Value = _sessionManager.SourceSystem;
                arrParams[3].Value = _sessionManager.SessionKey;
                arrParams[4].Value = _sessionManager.ActionKey;

                start = DateTime.Now;

                dr = _sqlRepository.ExecuteReader(DatabaseConnectionString, CommandType.StoredProcedure, <%= schema %>_Read<%= className %>_SPROC, arrParams);

                while (dr.Read())
                {
                    dto = new <%= className %>();
                    <% foreach(var column in SourceTable.Columns) { %>
                    dto.<%= StringUtil.ToPascalCase(column.Name) %> = _sqlReader.GetInt32(dr, "<%= column.Name %>");
                    <% } %>

                    list.Add(dto);
                }
            }
            finally
            {
                //'Close the Data Reader
                _sqlRepository.CloseDataReader(dr);
            }

            //'Log Sproc Performance
            _loggingManager.Sproc(<%= schema %>_Read<%= className %>_SPROC, RowCount(idTable), start);

            return list;

        }
        #endregion

<script runat="template">
private static readonly Dictionary<string, string> csharpTypeAlias = new Dictionary<string, string>(16)
{
    {"System.Int16", "short"},
    {"System.Int32", "int"},
    {"System.Int64", "long"},
    {"System.String", "string"},
    {"System.Object", "object"},
    {"System.Boolean", "bool"},
    {"System.Void", "void"},
    {"System.Char", "char"},
    {"System.Byte", "byte"},
    {"System.UInt16", "ushort"},
    {"System.UInt32", "uint"},
    {"System.UInt64", "ulong"},
    {"System.SByte", "sbyte"},
    {"System.Single", "float"},
    {"System.Double", "double"},
    {"System.Decimal", "decimal"}
};
    
public string ToType(ColumnSchema column)
{
    var type = column.SystemType.ToString();
    return ToType(type);
}

public string ToType(string type)
{
    if (type == "System.Xml.XmlDocument")
        type = "System.String";

    string t;
    if (csharpTypeAlias.TryGetValue(type, out t))
        return t;

    // drop system from namespace
    string[] parts = type.Split('.');
    if (parts.Length == 2 && parts[0] == "System")
        return parts[1];

    return type;
}
</script>