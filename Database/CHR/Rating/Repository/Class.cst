<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="True" %>

<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema"  %>

<%
var className = StringUtil.ToPascalCase(SourceTable.Name);
%>

public class <%= className %>
{
<% foreach(var column in SourceTable.Columns){ %>
    public <%= ToType(column) %> <%= StringUtil.ToPascalCase(column.Name) %> { get; set; }

<% } %>
}

<script runat="template">
private static readonly Dictionary<string, string> csharpTypeAlias = new Dictionary<string, string>(16)
{
    {"System.Int16", "short"},
    {"System.Int32", "int"},
    {"System.Int64", "long"},
    {"System.String", "string"},
    {"System.Object", "object"},
    {"System.Boolean", "bool"},
    {"System.Void", "void"},
    {"System.Char", "char"},
    {"System.Byte", "byte"},
    {"System.UInt16", "ushort"},
    {"System.UInt32", "uint"},
    {"System.UInt64", "ulong"},
    {"System.SByte", "sbyte"},
    {"System.Single", "float"},
    {"System.Double", "double"},
    {"System.Decimal", "decimal"}
};
    
public string ToType(ColumnSchema column)
{
    var type = column.SystemType.ToString();
    return ToType(type);
}

public string ToType(string type)
{
    if (type == "System.Xml.XmlDocument")
        type = "System.String";

    string t;
    if (csharpTypeAlias.TryGetValue(type, out t))
        return t;

    // drop system from namespace
    string[] parts = type.Split('.');
    if (parts.Length == 2 && parts[0] == "System")
        return parts[1];

    return type;
}
</script>